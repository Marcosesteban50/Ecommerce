@page "/producto"
@page "/producto/{Id:int}"



@inject ICategoriaServicio categoriaServicio

@inject iProductoServicio productoServicio
@inject IToastService toastService

@attribute [Authorize(Roles = "Administrador")]



<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@modelo.IdCategoria" @onchange="CambiarCategoria">
                    @foreach (var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>




    </div>

</div>

@code {

    [Parameter] public int Id { get; set; }
    private string Titulo = "Nuevo Producto";
    private string boton = "Crear";

    private List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();

    private ProductoDTO modelo = new ProductoDTO();





    //ESto es cuando cargan nuestros componentes , osea que es lo que mandara y
    //y en este caso sera los productos 
    protected override async Task OnInitializedAsync()
    {


        //lista("") esas comillas sin nada significa que obtendremos todo *
        var response = await categoriaServicio.Lista("");

        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;

            if(listaCategoria.Any() && Id == 0)
            {
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
            }
        }

    }





    protected override async Task OnParametersSetAsync()
    {
        //editando un usuario si es diferente de 0
        if (Id != 0)
        {
            Titulo = "Editar Producto";
            boton = "Actualizar";



            var response = await productoServicio.Obtener(Id);

            if (response.EsCorrecto!)
            {

                //Recibiendo toda la informacion del Usuario
                modelo = (ProductoDTO)response.Resultado!;

            }
            else
            {
                toastService.ShowWarning(response.Mensaje!);
            }
        }
    }






    void CambiarCategoria(ChangeEventArgs e)
    {
        //obteniendo el id de la categoria selecionada
        modelo.IdCategoria = Convert.ToInt32(e.Value!.ToString());

    }





    //Guardando la imagen
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        //obteniendo informacion de la imagen selecionada
        FileInfo fileInfo = new FileInfo(e.File.Name);



        if (fileInfo.Extension.ToLower().Contains(".jpg") ||
        fileInfo.Extension.ToLower().Contains(".png") ||
        fileInfo.Extension.ToLower().Contains(".jpeg"))
        {


            //reemplazando el punto " . " , por un espacio vacio " " 
            var format = $"imagen/{fileInfo.Extension.Replace(".", "")}";


            //cambiando tamano de imagen                                 h     w
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);


            //obteniendo tamano de array de byte para guardar la informacion de la imagen aqui
            var buffer = new byte[resizeImage.Size];


            //poniendo toda la imagen dentro del buffer que es un array de bytes
            await resizeImage.OpenReadStream().ReadAsync(buffer);



            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            //imagen del productoDTOto
            modelo.Imagen = imageData;

        }
    }






    private async Task GuardarCambios()
    {


        bool respuesta = true;

        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await productoServicio.Editar(modelo);

            if (response.EsCorrecto)
            {
                mensaje = "Producto fue modificado";
                toastService.ShowInfo(mensaje);
            }
            else
            {
                respuesta = false;
                mensaje = "No pudo editar";
            }
        }



        else
        {

            var response = await productoServicio.Crear(modelo);


            if (response.EsCorrecto)
            {

                mensaje = "Producto creado";
                toastService.ShowSuccess(mensaje);

            }
            else
            {
                respuesta = false;
                mensaje = "No  pudo crear";
            }
        }



        if (respuesta)
        {
            navServicio.NavigateTo("/productos");

        }
        else
        {
            toastService.ShowWarning(mensaje);

        }
    }



}
